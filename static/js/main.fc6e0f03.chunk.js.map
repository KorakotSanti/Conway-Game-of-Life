{"version":3,"sources":["component/game-rule/game-rule.styles.jsx","component/game-rule/game-rule.component.jsx","component/grid/grid.styles.jsx","component/grid/grid.component.jsx","component/size-input/size-input.styles.jsx","component/size-input/size-input.component.jsx","component/custom-button/custom-button.styles.jsx","component/custom-button/custom-button.component.jsx","component/interval-input/interval-input.component.jsx","component/config-component/config-component.component.jsx","App.js","index.js"],"names":["RuleContainer","styled","div","Link","a","TextBlock","UnderLineText","List","ol","ListItem","li","GameRule","href","GridContainer","props","size","Cell","color","Grid","grid","setGrid","running","newGrid","row","i","j","push","onClick","produce","colorCell","undefined","renderBoard","InputContainer","TextInput","input","Label","label","SizeInput","setSize","setRunning","type","value","onChange","e","temp","target","s","parseInt","console","log","rows","Array","from","CoolButton","button","CustomButton","children","click","IntervalInput","timeInterval","setTimeInterval","className","htmlFor","id","val","ConfigComponent","runningRef","useState","generation","setGeneration","stepGeneration","useCallback","current","g","gridCopy","neighbors","k","l","setTimeout","Math","floor","random","App","useRef","Fragment","style","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAEaA,EAAgBC,IAAOC,IAAV,2LAUbC,EAAOF,IAAOG,EAAV,iGAMJC,EAAYJ,IAAOC,IAAV,qEAKTI,EAAgBL,IAAOC,IAAV,mGAMbK,EAAON,IAAOO,GAAV,4BAGJC,EAAWR,IAAOS,GAAV,uF,OCgBNC,EArCE,WACf,OACE,eAACX,EAAD,WACE,uCACA,eAACK,EAAD,WACE,cAACF,EAAD,CAAMS,KAAK,wDAAX,mCAEQ,IAHV,4DAMA,cAACP,EAAD,2IAIA,eAACA,EAAD,0FAEQ,OAER,eAACA,EAAD,WACE,cAACC,EAAD,yCACA,eAACC,EAAD,WACE,cAACE,EAAD,6EAGA,cAACA,EAAD,mGAIA,cAACA,EAAD,2FCrCGI,EAAgBZ,IAAOC,IAAV,iKAEQ,SAAAY,GAAK,OAAEA,EAAMC,QAChB,SAAAD,GAAK,OAAEA,EAAMC,QAI/BC,EAAOf,IAAOC,IAAV,oHAGK,SAAAY,GAAK,OAAIA,EAAMG,S,OC6BtBC,EArCF,SAAC,GAAsC,IAApCH,EAAmC,EAAnCA,KAAMI,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAkCnC,OAAO,cAACR,EAAD,CAAeE,KAAMA,EAArB,SAtBa,WAIlB,IAHA,IAAIO,EAAU,GACVC,EAAM,GAFc,WAIfC,GACP,IALsB,eAKbC,GACPF,EAAIG,KACF,cAACV,EAAD,CAEEW,QAAS,YApBD,SAACH,EAAGC,GAChBJ,GAGJD,EACEQ,aAAQ,SAACT,GACPA,EAAKK,GAAGC,GAAKN,EAAKK,GAAGC,GAAK,EAAI,MAexBI,CAAUL,EAAGC,IAEfR,MAAOE,EAAKK,GAAGC,GAAK,aAAUK,GALhC,UACUN,EADV,YACeC,MAHVA,EAAI,EAAGA,EAAIV,EAAMU,IAAM,EAAvBA,GAWTH,EAAQI,KAAKH,GACbA,EAAM,IAbCC,EAAI,EAAGA,EAAIT,EAAMS,IAAM,EAAvBA,GAgBT,OAAOF,EAE0BS,MCpCxBC,EAAiB/B,IAAOC,IAAV,kGAMd+B,EAAYhC,IAAOiC,MAAV,sJASTC,EAAQlC,IAAOmC,MAAV,gDC0BHC,EAtCG,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAASlB,EAAgC,EAAhCA,QAASL,EAAuB,EAAvBA,KAAMwB,EAAiB,EAAjBA,WA8B3C,OACE,eAACP,EAAD,WACE,cAACG,EAAD,gCACA,cAACF,EAAD,CAAWO,KAAK,OAAOC,MAAO1B,EAAM2B,SA/BrB,SAACC,GAClB,IAAIC,EAAO,EAEX,GADAL,GAAW,GACY,KAAnBI,EAAEE,OAAOJ,MACXG,EAAO,MAEJ,CACH,IAAME,EAAIC,SAASJ,EAAEE,OAAOJ,OAC5BO,QAAQC,IAAIH,GAEVF,EADEE,EAAI,GACC,GAEAA,EAIXE,QAAQC,IAAIL,GAEZxB,GAAQ,WAEN,IADA,IAAM8B,EAAO,GACJ1B,EAAI,EAAGA,EAAIoB,EAAMpB,IACxB0B,EAAKxB,KAAKyB,MAAMC,KAAKD,MAAMP,IAAO,kBAAM,MAE1C,OAAOM,KAETZ,EAAQM,UC9BCS,EAAapD,IAAOqD,OAAV,sLCURC,EARM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAChC,OACE,cAACJ,EAAD,CAAY1B,QAAS8B,EAArB,SACGD,KC2CQE,G,MA9CO,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,gBAAiBrB,EAAiB,EAAjBA,WAUtD,OACE,sBAAKsB,UAAU,WAAf,UACE,uBAAOA,UAAU,UAAUC,QAAQ,kBAAnC,wBACA,qBAAKD,UAAU,WAAf,SACE,yBACEE,GAAG,kBACHtB,MAAOkB,EACPjB,SAhBa,SAACC,GACpB,IAAIqB,EAAMjB,SAASJ,EAAEE,OAAOJ,OACxBuB,IAAQL,IAGZpB,GAAW,GACXqB,EAAgBI,KAOZ,UAKE,wBAAQH,UAAU,UAAUpB,MAAM,MAAlC,oBAGA,wBAAQoB,UAAU,UAAUpB,MAAM,MAAlC,oBAGA,wBAAQoB,UAAU,UAAUpB,MAAM,MAAlC,oBAGA,wBAAQoB,UAAU,UAAUpB,MAAM,MAAlC,oBAGA,wBAAQoB,UAAU,UAAUpB,MAAM,OAAlC,qBAGA,wBAAQoB,UAAU,UAAUpB,MAAM,OAAlC,qBAGA,wBAAQoB,UAAU,UAAUpB,MAAM,OAAlC,+BCmEKwB,G,MAnGS,SAAC,GAOlB,IANL3B,EAMI,EANJA,QACAlB,EAKI,EALJA,QACAL,EAII,EAJJA,KACAM,EAGI,EAHJA,QACAkB,EAEI,EAFJA,WACA2B,EACI,EADJA,WACI,EACgCC,mBAAS,GADzC,mBACGC,EADH,KACeC,EADf,OAEoCF,mBAAS,KAF7C,mBAEGR,EAFH,KAEiBC,EAFjB,KAKEU,EAAiBC,uBAAY,WAE5BL,EAAWM,UAGhBH,GAAc,SAACI,GAAD,OAAOA,EAAI,KACzBrD,GAAQ,SAACqD,GACP,OAAO7C,YAAQ6C,GAAG,SAACC,GACjB,IAAK,IAAIlD,EAAI,EAAGA,EAAIT,EAAMS,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAMU,IAAK,CAE7B,IADA,IAAIkD,EAAY,EACPC,GAAK,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,GAAK,EAAGA,EAAI,EAAGA,IAClBrD,EAAIoD,GAAK,GAAKpD,EAAIoD,EAAI7D,GAAQU,EAAIoD,GAAK,GAAKpD,EAAIoD,EAAI9D,IACtD4D,GAAaF,EAAEjD,EAAIoD,GAAGnD,EAAIoD,KAIhCF,GAAaF,EAAEjD,GAAGC,IAEF,GAAKkD,EAAY,EAC/BD,EAASlD,GAAGC,GAAK,EACI,IAAZgD,EAAEjD,GAAGC,IAA0B,IAAdkD,IAC1BD,EAASlD,GAAGC,GAAK,UAM3BqD,WAAWR,EAAgBX,MAC1B,CAACvC,EAAS8C,EAAYnD,EAAM4C,IAkC/B,OACE,sBAAKE,UAAU,SAAf,UACE,8CAAiBO,KACjB,cAAC,EAAD,CAAcX,MAAO,kBAlClBpC,IACH6C,EAAWM,SAAU,EACrBF,UAEF/B,GAAYlB,IA8BV,SACGA,EAAU,OAAS,UAEtB,cAAC,EAAD,CACEsC,aAAcA,EACdC,gBAAiBA,EACjBrB,WAAYA,IAEd,cAAC,EAAD,CAAckB,MAAO,kBAlCvBlB,GAAW,GACX8B,EAAc,QACdjD,GAAQ,WAEN,IADA,IAAM8B,EAAO,GACJ1B,EAAI,EAAGA,EAAIT,EAAMS,IACxB0B,EAAKxB,KAAKyB,MAAMC,KAAKD,MAAMpC,IAAO,kBAAM,MAE1C,OAAOmC,MA2BP,mBACA,cAAC,EAAD,CAAcO,MAAO,kBAvBvBlB,GAAW,GACX8B,EAAc,QACdjD,GAAQ,WAEN,IADA,IAAM8B,EAAO,GACJ1B,EAAI,EAAGA,EAAIT,EAAMS,IACxB0B,EAAKxB,KAAKyB,MAAMC,KAAKD,MAAMpC,IAAO,kBAAMgE,KAAKC,MAAsB,EAAhBD,KAAKE,cAE1D,OAAO/B,MAgBP,uBACA,cAAC,EAAD,CACEZ,QAASA,EACTlB,QAASA,EACTL,KAAMA,EACNwB,WAAYA,SCzDL2C,G,MArCH,WAAO,IAAD,EACcf,oBAAS,GADvB,mBACT9C,EADS,KACAkB,EADA,OAEQ4B,mBAAS,IAFjB,mBAETpD,EAFS,KAEHuB,EAFG,OAGQ6B,oBAAS,WAE/B,IADA,IAAMjB,EAAO,GACJ1B,EAAI,EAAGA,EAAIT,EAAMS,IACxB0B,EAAKxB,KAAKyB,MAAMC,KAAKD,MAAMpC,IAAO,kBAAM,MAG1C,OAAOmC,KATO,mBAGT/B,EAHS,KAGHC,EAHG,KAYV8C,EAAaiB,mBAGnB,OAFAjB,EAAWM,QAAUnD,EAGnB,eAAC,IAAM+D,SAAP,WACE,oBAAIC,MAAO,CAAEC,UAAW,OAAxB,mCACA,sBAAKzB,UAAU,iBAAf,UACE,cAAC,EAAD,CACEvB,QAASA,EACTlB,QAASA,EACTL,KAAMA,EACNI,KAAMA,EACNE,QAASA,EACTkB,WAAYA,EACZ2B,WAAYA,IAEd,qBAAKL,UAAU,OAAf,SACE,cAAC,EAAD,CAAM9C,KAAMA,EAAMI,KAAMA,EAAMC,QAASA,EAASC,QAASA,MAE3D,cAAC,EAAD,YClCRkE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fc6e0f03.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const RuleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-left: 50px;\n  height: 90vh;\n  text-align: center;\n`;\n\nexport const Link = styled.a`\n  text-decoration: none;\n  cursor: pointer;\n  font-weight:bolder;\n`;\n\nexport const TextBlock = styled.div`\n  text-align: justify;\n  padding: 5px;\n`;\n\nexport const UnderLineText = styled.div`\n  text-align: center;\n  padding: 5px;\n  text-decoration: underline;\n`;\n\nexport const List = styled.ol`\n`;\n\nexport const ListItem = styled.li`\n  word-spacing: 1px;\n  line-height: 1;\n  padding: 10px;\n`;","import React from \"react\";\n\nimport {\n  RuleContainer,\n  Link,\n  TextBlock,\n  List,\n  ListItem,\n  UnderLineText,\n} from \"./game-rule.styles\";\n\nconst GameRule = () => {\n  return (\n    <RuleContainer>\n      <h1>Rules</h1>\n      <TextBlock>\n        <Link href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">\n          Conway's Game of Life\n        </Link>{\" \"}\n        is a celluar automation created by John Horton Conway.\n      </TextBlock>\n      <TextBlock>\n        There is one singular grid. Each cell in the grid is either alive or\n        dead. Each cell is surrounded by up to eight neighbors.\n      </TextBlock>\n      <TextBlock>\n        The color black will indicates live and color white will indicate dead\n        cells{\" \"}\n      </TextBlock>\n      <TextBlock>\n        <UnderLineText>The rules are as followed:</UnderLineText>\n        <List>\n          <ListItem>\n            Any live cell with two or three live neighbors will stay alive\n          </ListItem>\n          <ListItem>\n            Any live cell with less than 2 live neighbors or more than 3 live\n            neighbors will die\n          </ListItem>\n          <ListItem>\n            Any dead cell with exactly 3 live neighbors will come back to life\n          </ListItem>\n        </List>\n      </TextBlock>\n    </RuleContainer>\n  );\n};\n\nexport default GameRule;\n","import styled from 'styled-components';\n\nexport const GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props=>props.size}, 18px);\n  grid-template-rows: repeat(${props=>props.size}, 18px);\n  border: solid black 1px;\n`\n\nexport const Cell = styled.div`\n  width: 18px;\n  height: 18px;\n  background-color: ${props => props.color};\n  border: solid grey 0.5px;\n`;","import React from \"react\";\nimport { GridContainer, Cell } from \"./grid.styles\";\nimport produce from \"immer\";\n\nconst Grid = ({ size, grid, setGrid, running }) => {\n  const colorCell = (i, j) => {\n    if (running) {\n      return;\n    }\n    setGrid(\n      produce((grid) => {\n        grid[i][j] = grid[i][j] ? 0 : 1;\n      })\n    );\n  };\n\n  const renderBoard = () => {\n    let newGrid = [];\n    let row = [];\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        row.push(\n          <Cell\n            key={`${i}-${j}`}\n            onClick={() => {\n              colorCell(i, j);\n            }}\n            color={grid[i][j] ? \"black\" : undefined}\n          />\n        );\n      }\n      newGrid.push(row);\n      row = [];\n    }\n\n    return newGrid;\n  };\n  return <GridContainer size={size}>{renderBoard()}</GridContainer>;\n};\n\nexport default Grid;\n","import styled from 'styled-components';\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nexport const TextInput = styled.input`\n  display: flex;\n  width: 40%;\n  font-size: 20px;\n  border-radius: 20px;\n  text-align: center;\n  margin-left: 20px;\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n`;","import React from \"react\";\n\nimport {InputContainer, Label, TextInput } from './size-input.styles';\n\n\nconst SizeInput = ({ setSize, setGrid, size, setRunning }) => {\n\n  const changeSize = (e) => {\n    let temp = 0;\n    setRunning(false);\n    if (e.target.value === \"\") {\n      temp = 0;\n    } \n    else {\n      const s = parseInt(e.target.value);\n      console.log(s);\n      if (s > 50) {\n        temp = 50;\n      } else {\n        temp = s;\n      }\n    }\n\n    console.log(temp);\n\n    setGrid(() => {\n      const rows = [];\n      for (let i = 0; i < temp; i++) {\n        rows.push(Array.from(Array(temp), () => 0));\n      }\n      return rows;\n    });\n    setSize(temp);\n  };\n\n  return (\n    <InputContainer>\n      <Label>Set Size (0-50): </Label>\n      <TextInput type=\"text\" value={size} onChange={changeSize}/>\n    </InputContainer>\n  );\n};\n\nexport default SizeInput;\n","import styled from 'styled-components';\n\nexport const CoolButton = styled.button`\n  margin-bottom: 5%;\n  width: 100%;\n  border: solid black 1px;\n  background-color: green;\n  font-size: 30px;\n  font-weight: 600;\n  line-height: 1;\n`;","import React from \"react\";\n\nimport { CoolButton } from \"./custom-button.styles\";\n\nconst CustomButton = ({ children, click }) => {\n  return (\n    <CoolButton onClick={click}>\n      {children}\n    </CoolButton>\n  );\n};\n\nexport default CustomButton;\n","import React from \"react\";\n\nimport \"./interval-input.styles.css\";\n\nconst IntervalInput = ({ timeInterval, setTimeInterval, setRunning }) => {\n  const handleChange = (e) => {\n    let val = parseInt(e.target.value);\n    if (val === timeInterval) {\n      return;\n    }\n    setRunning(false);\n    setTimeInterval(val);\n  };\n\n  return (\n    <div className=\"interval\">\n      <label className=\"a-label\" htmlFor=\"interval-select\">Interval: </label>\n      <div className=\"selector\">\n        <select\n          id=\"interval-select\"\n          value={timeInterval}\n          onChange={handleChange}\n        >\n          <option className=\"options\" value=\"100\">\n            100 ms\n          </option>\n          <option className=\"options\" value=\"250\">\n            250 ms\n          </option>\n          <option className=\"options\" value=\"500\">\n            500 ms\n          </option>\n          <option className=\"options\" value=\"750\">\n            750 ms\n          </option>\n          <option className=\"options\" value=\"1000\">\n            1000 ms\n          </option>\n          <option className=\"options\" value=\"2000\">\n            2000 ms\n          </option>\n          <option className=\"options\" value=\"5000\">\n            5000 ms\n          </option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default IntervalInput;\n","import React, { useCallback, useState } from \"react\";\nimport produce from \"immer\";\n\nimport SizeInput from \"../size-input/size-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport IntervalInput from \"../interval-input/interval-input.component\";\n\nimport \"./config-component.styles.css\";\n\nconst ConfigComponent = ({\n  setSize,\n  setGrid,\n  size,\n  running,\n  setRunning,\n  runningRef,\n}) => {\n  const [generation, setGeneration] = useState(0);\n  const [timeInterval, setTimeInterval] = useState(100);\n\n  // logic for essentially playing going through generations infinite times or until user click stops\n  const stepGeneration = useCallback(() => {\n    // stops when user click stop\n    if (!runningRef.current) {\n      return;\n    }\n    setGeneration((g) => g + 1);\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < size; i++) {\n          for (let j = 0; j < size; j++) {\n            let neighbors = 0;\n            for (let k = -1; k < 2; k++) {\n              for (let l = -1; l < 2; l++) {\n                if (i + k >= 0 && i + k < size && j + l >= 0 && j + l < size) {\n                  neighbors += g[i + k][j + l];\n                }\n              }\n            }\n            neighbors -= g[i][j];\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(stepGeneration, timeInterval);\n  }, [setGrid, runningRef, size, timeInterval]);\n\n  const startGame = () => {\n    if (!running) {\n      runningRef.current = true;\n      stepGeneration();\n    }\n    setRunning(!running);\n  };\n\n  const clearBoard = () => {\n    setRunning(false);\n    setGeneration(0);\n    setGrid(() => {\n      const rows = [];\n      for (let i = 0; i < size; i++) {\n        rows.push(Array.from(Array(size), () => 0));\n      }\n      return rows;\n    });\n  };\n\n  const randomizeBoard = () => {\n    setRunning(false);\n    setGeneration(0);\n    setGrid(() => {\n      const rows = [];\n      for (let i = 0; i < size; i++) {\n        rows.push(Array.from(Array(size), () => Math.floor(Math.random() * 2)));\n      }\n      return rows;\n    });\n  };\n\n  return (\n    <div className=\"config\">\n      <h1>Generation: {generation}</h1>\n      <CustomButton click={() => startGame()}>\n        {running ? \"stop\" : \"start\"}\n      </CustomButton>\n      <IntervalInput\n        timeInterval={timeInterval}\n        setTimeInterval={setTimeInterval}\n        setRunning={setRunning}\n      />\n      <CustomButton click={() => clearBoard()}>clear</CustomButton>\n      <CustomButton click={() => randomizeBoard()}>randomize</CustomButton>\n      <SizeInput\n        setSize={setSize}\n        setGrid={setGrid}\n        size={size}\n        setRunning={setRunning}\n      />\n    </div>\n  );\n};\n\nexport default ConfigComponent;\n","import React, { useState, useRef } from \"react\";\n\nimport GameRule from './component/game-rule/game-rule.component';\nimport Grid from \"./component/grid/grid.component\";\nimport ConfigComponent from \"./component/config-component/config-component.component\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [running, setRunning] = useState(false);\n  const [size, setSize] = useState(20);\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < size; i++) {\n      rows.push(Array.from(Array(size), () => 0));\n    }\n\n    return rows;\n  });\n\n  const runningRef = useRef();\n  runningRef.current = running;\n\n  return (\n    <React.Fragment>\n      <h1 style={{ marginTop: \"0px\" }}>Conway's Game of Life</h1>\n      <div className=\"main-container\">\n        <ConfigComponent\n          setSize={setSize}\n          setGrid={setGrid}\n          size={size}\n          grid={grid}\n          running={running}\n          setRunning={setRunning}\n          runningRef={runningRef}\n        />\n        <div className=\"grid\">\n          <Grid size={size} grid={grid} setGrid={setGrid} running={running}/>\n        </div>\n        <GameRule/>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}